// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
const verifier = artifacts.require('Verifier')
const { proof, inputs } = require('../../zokrates/code/square/proof')
const {
    BN,           // Big Number support
    constants,    // Common constants, like the zero address and largest integers
    expectEvent,  // Assertions for emitted events
    expectRevert, // Assertions for transactions that should fail
} = require('@openzeppelin/test-helpers');


contract('Verifier tests', accounts => {
    beforeEach(async function () {
        this.contract = await verifier.new()
    })

    // Test verification with correct proof
    // - use the contents from proof.json generated from zokrates steps
    it("can verify with correct proofs", async function () {
        let result = await this.contract.verifyTx(proof, inputs);
        assert.equal(result, true, "Should verifiy with correct proof");

    })

    // Test verification with incorrect proof
    it("will fail if incorrect parameters are given", async function () {

        let fakeProof = {
            ...proof
        };
        fakeProof.c = fakeProof.a;

        let result = await this.contract.verifyTx(fakeProof, inputs);

        assert.equal(result, false, "Should not verifiy with fake proof");
    })

})

